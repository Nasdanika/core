engineering-product:
  name: Common
  path: common
  action-prototype: "../../javadoc-action-prototype.xml#/"
  features:
    execution-model:
      name: Execution Model
      documentation:
        content-interpolator:
          source:
            content-markdown:
              style: true
              source:
                content-resource: features/execution-model.md  
  issues:
    nsdiagram-dialect:
      name: Add support of nsdiagram dialect
      description: |+2 
        Diagram YAML in a fenced block - might be easier to author in some cases than, say, PlantUML.
        As it will result in a circular dependency use a service or some other type of registration.
        A more radical way is to drop the enum altogether and switch to services.
    drawio-escaping:
      name: Extract shape text from drawio XML for searching
      description: Extract from html.app.Util.createSearchDocument().
      categories: engineering://nasdanika/issue-categories/good-first-issue     
    diagram-dialect:
      name: Diagram dialect
      description: |+2
        And also extensible dialects via services - use Java services to find DiagramGenerator service for a dialect.
        Get rid of enum in favor dialect name discovery via services.
        One of dialect providers - org.nasdanika.diagram.gen - reads the fenced block as diagram YAML load spec. Generates
        PlantUML, Drawio, etc. Possible advantages - ease of switch between generation targets, one spec to learn,
        higher level of abstraction, ability to define drawio diagrams in text.
        Disadvantages - may be more verbose and may not provide all the features of the underlying diagramming engine.    
      