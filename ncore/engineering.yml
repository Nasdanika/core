engineering-module:
  name: Ncore
  path: ncore
  dependencies:
    - engineering://nasdanika/modules/core/modules/common
  action-prototype: "../../nasdanika.github.io/target/model-doc/actions/ncore.genmodel.xml#/"    
  issues:
    object-signing:
      name: Object signing
      description: |+2
        Similar to code signing - during the load process digests are computed for objects and stored in the object if it implements Signed interface.
        For nested objects signatures are used in computing the container signature for contained objects which implement Signed.
        Signing is performed if the loading context provides Signer service. Object signing can be used in combination with markers to track and prove
        data provenance. Possibly use JWT - build a JSON Object, sign, get the signature and store in the object.
        Perhaps sign the root object and just compute hashes of contained objects.       
    git-marker:
      name: GitMarker
      description: |+2
        Extends Marker. Method to NcoreUtil to scan a model and replace Markers with GitMarkers leveraging jGit. 
        Method takes Web UI URL computer function - Git provider specific - GitHub uses path, Bitbucket query parameters. 
        Origin(s), references, author, date, commit, blame - line number author. 
        A way to compute line range for an object - from own marker to the next sibling marker. 
        Shall be done at YAML lavel, maybe too involved.
        Info dialog in the UI showing Git info.
        Remotes, origin remote is a special case. Or take the first remote and use it as the property label.
        Analyze whether Marker is GitMarker at the time of injection to EObject. Another option is to handle it at even lower level - YAML/persistence.
        Would need GitMarker interface and impl. class at that level as well. Optional behavior, true by default - may slow down loading, but should be worth it.     
        Can be used for (remote) branch-specific publishing, e.g. <Base URL>origin/branches/master or <Base URL>origin/branches/tags/rel-1.0     
    action-prototype:
      name: Action prototype
      releases: engineering://nasdanika/modules/core/releases/2021-12-2
      status: engineering://nasdanika/issue-statuses/done
      description: |+2
        ModelElement action prototype reference. If set and is Action then the action would be copied and then populated.
        If set and is not action, then adapted to ActionProvider. If not set, then an new action is created using AppFactory. 
        This allows to merge actions generated by other tools or manually authored. E.g. ecore documentation actions or actions referencing ecore documentation.  
   
